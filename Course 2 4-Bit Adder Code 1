module Verilog1(x,y,z,S,C);
	input [3:0] x;
	input [3:0] y;
	input z;
	output [6:0] S;
	output C;
	wire [3:0] Sum;
	Four_bit_adder(Sum,C,x,y,z);	
	flunk dec1(Sum,S);
endmodule 

module half_adder(output S,C,input x,y);
	xor(S,x,y);
	and(C,x,y);
endmodule

module full_adder(output S,C,input x,y,z);
	wire h1_sum,h1_carry,h2_carry;
	half_adder (h1_sum, h1_carry, x, y);
	half_adder (S, h2_carry, h1_sum, z);
	or(C, h2_carry, h1_carry);
endmodule

module Four_bit_adder(output[3:0] Sum, output C, input[3:0]x,y,input z);
	wire c0,c1,c2;
	full_adder(Sum[0],c0,x[0],y[0],z);
	full_adder(Sum[1],c1,x[1],y[1],c0);
	full_adder(Sum[2],c2,x[2],y[2],c1);
	full_adder(Sum[3],C,x[3],y[3],c2);
endmodule

module flunk(V,outseg);
	input	[3:0]	V;
	output reg	[6:0] outseg;
	
	always @(V)
	begin
		case(V)
			4'b0000: outseg = 7'b1000000;		//	[6:0] -> gfedcba
			4'b0001:	outseg = 7'b1111001;	
			4'b0010:	outseg = 7'b0100100;	
			4'b0011:	outseg = 7'b0110000;	
			4'b0100:	outseg = 7'b0011001;	
			4'b0101:	outseg = 7'b0010010;	
			4'b0110:	outseg = 7'b0000010;	
			4'b0111:	outseg = 7'b1111000;	
			4'b1000:	outseg = 7'b0000000;	
			4'b1001:	outseg = 7'b0011000;	
			4'b1010:	outseg = 7'b0001000;	
			4'b1011:	outseg = 7'b0000011;	
			4'b1100:	outseg = 7'b1000110;	
			4'b1101:	outseg = 7'b0100001;	
			4'b1110:	outseg = 7'b0000110;	
			4'b1111:	outseg = 7'b0001110;	
	default:	outseg = 7'b1000000;	
	endcase
	end
endmodule 
