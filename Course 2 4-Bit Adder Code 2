module Adder (C4, A, B, C0, seg);
output C4;
input [3:0] A;
input [3:0] B;
input C0;
output [6:0] seg;

ripple rip(C4, A, B, C0,seg);

endmodule

module half_adder(output S, C,input x, y);

assign S = x ^ y;
assign C = x & y;

endmodule

module full_adder(output S, C,input x, y, z);
wire t ,j ,k;

half_adder half1(t, j, x, y);
half_adder half2(S, k, t, z);
assign C = k | j;

endmodule

module ripple(C4, A, B, C0, seg);
wire[3:0] Sum;
output C4;
input[3:0] A, B;
input C0;
output [6:0] seg;
wire C1, C2, C3;

full_adder full1(Sum[0] ,C1 ,A[0] ,B[0] ,C0);
full_adder full2(Sum[1] ,C2 ,A[1] ,B[1] ,C1);
full_adder full3(Sum[2] ,C3 ,A[2] ,B[2] ,C2);
full_adder full4(Sum[3] ,C4 ,A[3] ,B[3] ,C3);

seg7 (Sum, seg);

endmodule

module seg7(inValue, outSeg);
input [3:0] inValue;
output reg [6:0] outSeg;

always @(inValue)
begin
case(inValue)
   4'b0000: outSeg = 7'b1000000;
	4'b0001: outSeg = 7'b1111001;
	4'b0010: outSeg = 7'b0100100;
	4'b0011: outSeg = 7'b0110000;
	4'b0100: outSeg = 7'b0011001;
	4'b0101: outSeg = 7'b0010010;
	4'b0110: outSeg = 7'b0000010;
	4'b0111: outSeg = 7'b1111000;
	4'b1000: outSeg = 7'b0000000;
	4'b1001: outSeg = 7'b0010000;
	4'b1010: outSeg = 7'b0001000;
	4'b1011: outSeg = 7'b0000011;
	4'b1100: outSeg = 7'b1000110;
	4'b1101: outSeg = 7'b0100001;
	4'b1110: outSeg = 7'b0000110;
	4'b1111: outSeg = 7'b0001110;
default     outSeg = 7'b1000000;
endcase
end
endmodule
